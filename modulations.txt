A_c * (1 + m * np.cos(2 * np.pi * f_m * t + phi_m)) * np.cos(2 * np.pi * f_c * t + phi_c)
A_c * np.cos(2 * np.pi * f_c * t + k_f * np.cumsum(m) + phi_c)
A_c * np.cos(2 * np.pi * f_c * t + k_p * m + phi_c)
I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)
A_c * np.cos(2 * np.pi * f_c * t + np.pi * d(t))
A_c * np.cos(2 * np.pi * f_c * t + (np.pi / 2) * d(t))
A_c * np.cos(2 * np.pi * f_c * t + phi_prev + delta_phi)
A_c * np.cos(2 * np.pi * f(t) * t + phi)
A * np.cos(2 * np.pi * (f_0 * t + 0.5 * K * t**2) + phi)
A * np.cos(2 * np.pi * f_c * t + np.pi * h * np.cumsum(m) + phi)
np.sum([A_k * np.cos(2 * np.pi * f_k * t + phi_k) for k in range(N)])
A * np.cos(2 * np.pi * f_c * t + phi) if d(t) == 1 else 0
A * np.cos(2 * np.pi * f_c * t + theta(t))
A * np.cos(2 * np.pi * f_c * t + np.pi * np.cumsum(m) + phi)
A * d(t) * np.cos(2 * np.pi * f_c * t + phi)
I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)
I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)
I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)
I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)
A * np.cos(2 * np.pi * f_d * t + phi)
np.sum([A_n * p(t - n * T) for n in range(N)])
A * np.cos(2 * np.pi * f_c * t + phi_prev + delta_phi)
A * np.cos(2 * np.pi * f_c * t + phi_prev + delta_phi)
Codifica usata in altre modulazioni
A * square(2 * np.pi * f_c * t, duty=m(t))
Delta * np.sum([d_n * p(t - n * T) for n in range(N)])
np.sum([A_k * np.cos(2 * np.pi * f_k * t + phi_k) for k in range(N)])
np.sum([d_k * np.cos(2 * np.pi * f_c * t + phi_k) * c_k(t) for k in range(N)])
A * np.cos(2 * np.pi * f_h(t) * t + phi)
np.sum([d_k * np.cos(2 * np.pi * f_ck * t + phi_k) * c_k(t) for k in range(N)])
A * np.cos(2 * np.pi * f_c * t + phi + (2 * np.pi * d(t) / M))
(np.sum([A_k * np.cos(2 * np.pi * f_k * t + phi_k) for k in range(N)])) + (A * np.cos(2 * np.pi * f_c * t + phi_prev + delta_phi))
(A * np.cos(2 * np.pi * f_c * t + phi) if d(t) == 1 else 0) + (Delta * np.sum([d_n * p(t - n * T) for n in range(N)]))
(I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)) + (A * d(t) * np.cos(2 * np.pi * f_c * t + phi))
(A * square(2 * np.pi * f_c * t, duty=m(t))) + (A * np.cos(2 * np.pi * f_c * t + theta(t)))
(A_c * np.cos(2 * np.pi * f_c * t + phi_prev + delta_phi)) + (I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t))
(A_c * np.cos(2 * np.pi * f_c * t + phi_prev + delta_phi)) + (A * np.cos(2 * np.pi * (f_0 * t + 0.5 * K * t**2) + phi))
(A * np.cos(2 * np.pi * f_c * t + theta(t))) + (Delta * np.sum([d_n * p(t - n * T) for n in range(N)]))
(A * np.cos(2 * np.pi * f_c * t + phi_prev + delta_phi)) + (A * np.cos(2 * np.pi * f_c * t + phi + (2 * np.pi * d(t) / M)))
(Delta * np.sum([d_n * p(t - n * T) for n in range(N)])) + (np.sum([d_k * np.cos(2 * np.pi * f_ck * t + phi_k) * c_k(t) for k in range(N)]))
(A_c * (1 + m * np.cos(2 * np.pi * f_m * t + phi_m)) * np.cos(2 * np.pi * f_c * t + phi_c)) + (A * np.cos(2 * np.pi * f_c * t + phi_prev + delta_phi))
(I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)) + (A * np.cos(2 * np.pi * f_c * t + phi) if d(t) == 1 else 0)
(np.sum([A_n * p(t - n * T) for n in range(N)])) + (I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t))
(A * square(2 * np.pi * f_c * t, duty=m(t))) + (A_c * np.cos(2 * np.pi * f_c * t + k_f * np.cumsum(m) + phi_c))
(np.sum([d_k * np.cos(2 * np.pi * f_ck * t + phi_k) * c_k(t) for k in range(N)])) + (A_c * np.cos(2 * np.pi * f_c * t + phi_prev + delta_phi))
(I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)) + (A * d(t) * np.cos(2 * np.pi * f_c * t + phi))
(np.sum([A_k * np.cos(2 * np.pi * f_k * t + phi_k) for k in range(N)])) + (np.sum([d_k * np.cos(2 * np.pi * f_c * t + phi_k) * c_k(t) for k in range(N)]))
(A_c * np.cos(2 * np.pi * f(t) * t + phi)) + (A * np.cos(2 * np.pi * f_d * t + phi))
(Delta * np.sum([d_n * p(t - n * T) for n in range(N)])) + (A_c * np.cos(2 * np.pi * f_c * t + (np.pi / 2) * d(t)))
(A_c * np.cos(2 * np.pi * f_c * t + np.pi * d(t))) + (A * np.cos(2 * np.pi * f_c * t + np.pi * np.cumsum(m) + phi))
(A * np.cos(2 * np.pi * f_c * t + phi_prev + delta_phi)) + (A * d(t) * np.cos(2 * np.pi * f_c * t + phi))
(A_c * np.cos(2 * np.pi * f_c * t + phi_prev + delta_phi)) + (np.sum([A_n * p(t - n * T) for n in range(N)]))
(np.sum([A_k * np.cos(2 * np.pi * f_k * t + phi_k) for k in range(N)])) + (np.sum([A_k * np.cos(2 * np.pi * f_k * t + phi_k) for k in range(N)]))
(I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)) + (A_c * np.cos(2 * np.pi * f_c * t + k_f * np.cumsum(m) + phi_c))
(np.sum([d_k * np.cos(2 * np.pi * f_ck * t + phi_k) * c_k(t) for k in range(N)])) + (A * d(t) * np.cos(2 * np.pi * f_c * t + phi))
(I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)) + (A * np.cos(2 * np.pi * f_c * t + theta(t)))
(A_c * np.cos(2 * np.pi * f_c * t + k_f * np.cumsum(m) + phi_c)) + (A * np.cos(2 * np.pi * f_c * t + np.pi * np.cumsum(m) + phi))
(np.sum([d_k * np.cos(2 * np.pi * f_ck * t + phi_k) * c_k(t) for k in range(N)])) + (A * np.cos(2 * np.pi * f_c * t + phi) if d(t) == 1 else 0)
(I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)) + (Codifica usata in altre modulazioni)
(A_c * np.cos(2 * np.pi * f_c * t + np.pi * d(t))) + (np.sum([A_k * np.cos(2 * np.pi * f_k * t + phi_k) for k in range(N)]))
(I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)) + (A_c * np.cos(2 * np.pi * f_c * t + k_f * np.cumsum(m) + phi_c))
(Delta * np.sum([d_n * p(t - n * T) for n in range(N)])) + (I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t))
(I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)) + (np.sum([A_n * p(t - n * T) for n in range(N)]))
(I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)) + (A_c * np.cos(2 * np.pi * f_c * t + np.pi * d(t)))
(np.sum([A_n * p(t - n * T) for n in range(N)])) + (A * np.cos(2 * np.pi * f_h(t) * t + phi))
(A * np.cos(2 * np.pi * (f_0 * t + 0.5 * K * t**2) + phi)) + (A * np.cos(2 * np.pi * f_c * t + np.pi * np.cumsum(m) + phi))
(np.sum([A_n * p(t - n * T) for n in range(N)])) + (A_c * np.cos(2 * np.pi * f_c * t + k_f * np.cumsum(m) + phi_c))
(I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)) + (A_c * np.cos(2 * np.pi * f_c * t + (np.pi / 2) * d(t)))
(I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)) + (A * d(t) * np.cos(2 * np.pi * f_c * t + phi))
(A * np.cos(2 * np.pi * f_c * t + phi) if d(t) == 1 else 0) + (I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t))
(A * np.cos(2 * np.pi * f_c * t + phi + (2 * np.pi * d(t) / M))) + (A * d(t) * np.cos(2 * np.pi * f_c * t + phi))
(I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)) + (A * d(t) * np.cos(2 * np.pi * f_c * t + phi))
(A * np.cos(2 * np.pi * f_c * t + phi + (2 * np.pi * d(t) / M))) + (A * np.cos(2 * np.pi * f_c * t + phi_prev + delta_phi))
(A * square(2 * np.pi * f_c * t, duty=m(t))) + (A_c * np.cos(2 * np.pi * f_c * t + k_p * m + phi_c))
(np.sum([d_k * np.cos(2 * np.pi * f_ck * t + phi_k) * c_k(t) for k in range(N)])) + (I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t))
(np.sum([A_n * p(t - n * T) for n in range(N)])) + (A * np.cos(2 * np.pi * f_c * t + np.pi * np.cumsum(m) + phi))
(A_c * np.cos(2 * np.pi * f_c * t + k_p * m + phi_c)) + (I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t))
(np.sum([d_k * np.cos(2 * np.pi * f_ck * t + phi_k) * c_k(t) for k in range(N)])) + (A_c * np.cos(2 * np.pi * f_c * t + (np.pi / 2) * d(t)))
(Delta * np.sum([d_n * p(t - n * T) for n in range(N)])) + (A * np.cos(2 * np.pi * f_c * t + phi_prev + delta_phi))
(A * d(t) * np.cos(2 * np.pi * f_c * t + phi)) + (A_c * np.cos(2 * np.pi * f(t) * t + phi))
(I(t) * np.cos(2 * np.pi * f_c * t) - Q(t) * np.sin(2 * np.pi * f_c * t)) + (A * np.cos(2 * np.pi * f_c * t + theta(t)))